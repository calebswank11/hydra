@import '../variables/colors.scss';
@import '../variables/variables.scss';
// exponential function
@function pow($number, $exponent) {
  $value: $min;

  @if $exponent > 0 {
    @for $i from 1 through $exponent {
      $value: $value * $number;
    }
  }

  @return $value;
}

@function transitionFunct($node){
  // @if node  = array
  // @else node is single
  @return $node;
}
@mixin fg($num) {
  flex-grow: $num;
}
// define colors
@each $number in $colorArray {
  .bgc-#{nth($number, 1)} {
    background-color: transparentize(nth($number, 2), 0);
  }
  .bdc-#{nth($number, 1)} {
    border-color: transparentize(nth($number, 2), 0);
  }
  .color-#{nth($number, 1)} {
    color: transparentize(nth($number, 2), 0);
  }
}

@each $number in $array {
  @for $i from 1 through $number{
    @media screen and (max-width:#{$minScreenSize}px) {
      @if $number == $sm-columns {
        .#{$colSm}#{$i} {
          width: calc((#{$amount}#{$units} / #{$number}) * #{$i});
        }
        .#{$colSm}push-#{$i}  {
          left: calc((#{$amount}#{$units} / #{$number}) * #{$i});
        }
        .#{$colSm}pull-#{$i}  {
          right: calc((#{$amount}#{$units} / #{$number}) * #{$i});
        }
      }
    }
    @if $number == $md-columns {
      .#{$colMd}#{$i} {
        width: calc((#{$amount}#{$units} / #{$number}) * #{$i});
      }
      .#{$colMd}push-#{$i}  {
        left: calc((#{$amount}#{$units} / #{$number}) * #{$i});
      }
      .#{$colMd}pull-#{$i}  {
        right: calc((#{$amount}#{$units} / #{$number}) * #{$i});
      }
    }
    @media screen and (min-width:#{$maxScreenSize}px) {
      @if $number == $lg-columns {
        .#{$colLg}#{$i} {
          width: calc((#{$amount}#{$units} / #{$number}) * #{$i});
        }
        .#{$colLg}push-#{$i}  {
          left: calc((#{$amount}#{$units} / #{$number}) * #{$i});
        }
        .#{$colLg}pull-#{$i}  {
          right: calc((#{$amount}#{$units} / #{$number}) * #{$i});
        }
      }
    }
  }
}
@each $number in $bdrdsArray {
  .#{nth($number, 1)} {
    border-#{nth($number, 2)}-#{nth($number, 3)}-radius: $border-radius;
  }
}

//////////////
// $var : fntsz400;
// .button {
//   @extend .#{$var};
// }

@keyframes fadeIn {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}
@keyframes scaleOut {
  0% {
    transform: translate(-50%, -50%)scale(0);
    opacity: 0;
  }
  100% {
    opacity: 1;
    transform: translate(-50%, -50%)scale(1);
  }
}
@mixin scaleY {
  transition: height .5s ease;
  &::before {
    height: 0%;
  }
  &:hover::before {
    height: 100%;
  }
}
// @keyframes scaleY {
//   0% {
//     height: 0%;
//     opacity: 0;
//   }
//   100% {
//     opacity: 1;
//     height: 100%
//   }
// }

@mixin transition($type) {
  transition: $type $transitionDuration $transitionTimingFunction;
}
.transition {
  @include transition(transitionFunct(color));
}
